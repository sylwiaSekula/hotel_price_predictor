import numpy as np
import os
import pandas as pd
import pickle
from scripts.settings import *
from sklearn.metrics import make_scorer, median_absolute_error, mean_absolute_error, mean_absolute_percentage_error
from sklearn.model_selection import cross_validate, KFold


def median_absolute_percentage_error(y_test: pd.Series, y_pred: pd.Series) -> float:
    """
    Calculate the Median Absolute Percentage Error (MdAPE).
    :param y_test: pd.Series, the actual target values (ground truth) for the test dataset.
    :param y_pred: pd.Series, the predicted target values generated by a regression model.
    :return: float, Median Absolute Percentage Error.
    """
    mdape = np.median((np.abs(np.subtract(y_test, y_pred) / y_test)))
    return mdape


def evaluate_model(y_test: pd.Series, y_pred: pd.Series) -> (float, float, float):
    """
    Evaluate the performance of a regression model by computing three different error metrics: Median Absolute Error (MedAE),
    Mean Absolute Error (MAE), and Mean Absolute Percentage Error (MAPE).
    :param y_test: pd.Series, the actual target values (ground truth) for the test dataset.
    :param y_pred: pd.Series, the predicted target values generated by a regression model.
    :return:Tuple(float, float, float): a tuple containing the following error metrics: MedAE, MAE, MAPE.
    """
    median_absolute_err = median_absolute_error(y_test, y_pred)
    mean_absolute_err = mean_absolute_error(y_test, y_pred)
    mape = mean_absolute_percentage_error(y_test, y_pred)
    mdape = median_absolute_percentage_error(y_test, y_pred)
    return median_absolute_err, mean_absolute_err, mape, mdape


def main():
    # load the test dataset
    df_test = pd.read_csv('../prepare_data/df_test.csv')
    target = 'price'
    X_test = df_test.drop(target, axis=1)  # features
    y_test = df_test[target]  # target
    # define the number of folds for cross-validation
    num_folds = 5  # You can change this to the desired number of folds
    # initialize KFold cross-validator
    kf = KFold(n_splits=num_folds, shuffle=True, random_state=42)
    # define scoring metrics for cross-validation
    scoring = {
        'Median Absolute Error': make_scorer(median_absolute_error),
        'Mean Absolute Error': make_scorer(mean_absolute_error),
        'Mean Absolute Percentage Error': make_scorer(mean_absolute_percentage_error),
        'Median Absolute Percentage Error': make_scorer(median_absolute_percentage_error)
    }
    # load the trained models
    rf_regressor_opt = pickle.load(open(os.path.join(trained_model_dir, random_forest_file), 'rb'))
    xgb_opt = pickle.load(open(os.path.join(trained_model_dir, xgboost_file), 'rb'))
    knn_opt = pickle.load(open(os.path.join(trained_model_dir, knn_file), 'rb'))
    # Predict the target on the test data
    y_pred = rf_regressor_opt.predict(X_test)
    y_pred_xgb = xgb_opt.predict(X_test)
    y_pred_knn = knn_opt.predict(X_test)

    # perform cross-validation for each model
    rf_results = cross_validate(rf_regressor_opt, X_test, y_test, cv=kf, scoring=scoring)
    xgb_results = cross_validate(xgb_opt, X_test, y_test, cv=kf, scoring=scoring)
    knn_results = cross_validate(knn_opt, X_test, y_test, cv=kf, scoring=scoring)

    # calculate metrics for each model
    metrics_rf = evaluate_model(y_test, y_pred)
    metrics_xgb = evaluate_model(y_test, y_pred_xgb)
    metrics_knn = evaluate_model(y_test, y_pred_knn)

    #  Print metrics
    print("Random Forest => Metrics:", metrics_rf, "\nCross-Validation Scores:")
    for metric_name, metric_values in rf_results.items():
        print(f"{metric_name} (mean): {np.mean(metric_values)}")

    print("\nXGBoost => Metrics:", metrics_xgb, "\nCross-Validation Scores:")
    for metric_name, metric_values in xgb_results.items():
        print(f"{metric_name} (mean): {np.mean(metric_values)}")

    print("\nKNN => Metrics:", metrics_knn, "\nCross-Validation Scores:")
    for metric_name, metric_values in knn_results.items():
        print(f"{metric_name} (mean): {np.mean(metric_values)}")


if __name__ == '__main__':
    main()